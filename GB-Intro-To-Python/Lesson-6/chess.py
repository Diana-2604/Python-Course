# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били друг друга.
# Вам дана расстановка 8 ферзей на доске, определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел, каждое число от 1 до 8 - координаты 8 ферзей.
# Если ферзи не бьют друг друга верните истину, а если бьют - ложь.

# Напишите функцию в шахматный модуль.
# Используйте генератор случайных чисел для случайной расстановки ферзей в задаче выше.
# Проверяйте различный случайные варианты и выведите 4 успешных расстановки.
import random


def is_attacking_queens(queens):
    # Проверяет, бьют ли какие-либо две ферзя друг друга.
    # Параметры:
        # queens (list): Список координат ферзей в формате [(x1, y1), (x2, y2), ..., (x8, y8)].
    # Возвращает:
        # bool: True, если ферзи не бьют друг друга, False в противном случае.

    for i in range(8):
        for j in range(i + 1, 8):
            if queens[i][0] == queens[j][0] or \
                    queens[i][1] == queens[j][1] or \
                    abs(queens[i][0] - queens[j][0]) == abs(queens[i][1] - queens[j][1]):
                # Ферзи бьют друг друга, если они находятся на одной вертикали, горизонтали или диагонали.
                return False
    return True


def random_queens():
    # Генерирует случайную расстановку 8 ферзей на доске и проверяет, бьют ли они друг друга.
    # Возвращает:
        # tuple: Кортеж, содержащий список координат ферзей и булево значение, указывающее, бьют ли ферзи друг друга.

    queens = [(i, random.randint(1, 8)) for i in range(1, 9)]
    is_attacking = not is_attacking_queens(queens)
    return queens, is_attacking


# Создает пустой список successful_queens и запускает цикл while,
# пока этот список не будет содержать 4 успешные расстановки.
successful_queens = []
while len(successful_queens) < 4:
    queens, is_attacking = random_queens()
    if not is_attacking:
        successful_queens.append(queens)

for queens in successful_queens:
    print(queens)
